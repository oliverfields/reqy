#!/bin/bash

# Localization maintenance script. Must be run from l10n directory
#
# L10n is done using GNUgettext. If python source files are modified that
# already contain translation strings *_(...)* then the translation files
# must be regenerated. Gettext uses the following files that must be managed.
#
# * Catalog file (.pot) that tracks which files have translations and where
#   in the file they occour
# * Portable object files (.po, plain text) containing the actual tranlsations
# * Machine object files (.mo, binary) compiled .po files
#
# All localization files exist in the *l10n* directory.
#
# Catalog (.pot)
# ==============
# 
# The .pot file contains an index/list where the translation strings exist in
# the files. The following will get translation strings for all artifacts, 
# the rest of reqy is not tranlated.

timestamp="$(date --rfc-3339=seconds)"
pot_file="reqy.pot"
po_file="nb_NO.po"
mo_file="nb_NO.mo"

echo '# Reqy requirements manager l10n
# Copyright (C) Oliver Fields
# This file is distributed under the same license as the reqy package
# Oliver Fields <oliver@phnd.net>
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: oliver@phnd.net\n"
"Last-Translator: Oliver Fields <oliver@phnd.net>\n"
"Language-Team: Reqy l10n\n"
"Language: Python\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"'
# > "$pot_file"

echo "\"POT-Creation-Date: $timestamp\n\"
\"PO-Revision-Date: $timestamp\n\""
# >> "$pot_file"


xgettext --language=Python \
  -d reqy \
  --output=- \
  --omit-header \
  --strict \
  ../artifact/*.py \
  ../*.py > "$pot_file"


# Portable object (.po)
# =====================
#
# Each translation language will be one po file. Po files are generated from
# the pot file. If the po file already exists any changes from the pot file
# will be merged in, else it will just be a copy of the pot file

if [ -e "$po_file" ]; then

  msgmerge -q -o "$po_file" "$po_file" "$pot_file"

else
  cp "$pot_file" "$po_file"
fi

# Open file for editing?
echo "Type 'yes' to edit $po_file, any other key quits"
read edit_po
if [ "$edit_po" = "yes" ]; then
  poedit "$po_file"
fi


# Machine object (.mo)
# ====================
#
# The mo files are simply binary versions of the po files. They myst be
# generated as follows if a po file is updated.

msgfmt -o "$mo_file" "$po_file"


